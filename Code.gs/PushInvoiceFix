function pushInvoiceToQBO(sheet) {
  checkRateLimit();  // üõ° Prevent hitting API rate limits

  try {
    Logger.log("üìå Starting invoice sync for sheet: " + sheet.getName());

    // ‚úÖ Extract invoice details from the sheet
    var invoiceNumber = sheet.getRange("A1").getValue().replace("Invoice Number: ", "").trim();
    var txnDate = sheet.getRange("A2").getValue().replace("Date: ", "").trim();
    var customer = sheet.getRange("A3").getValue().replace("Customer: ", "").trim();
    var total = parseFloat(sheet.getRange("A4").getValue().replace("Total: $", "").trim());

    Logger.log("üìÜ Transaction Date: " + txnDate);
    Logger.log("üë§ Customer Name: " + customer);
    Logger.log("üí∞ Invoice Total: " + total);

    // ‚úÖ Check if the invoice already exists in QuickBooks
    var invoiceId = getInvoiceIdByDocNumber(invoiceNumber);
    if (!invoiceId) {
      Logger.log("‚ùå Invoice not found. Creating a new invoice.");
      createInvoiceInQBO(sheet);
      return;
    }

    // ‚úÖ Fetch SyncToken for the existing invoice
    var syncTokens = getAllSyncTokens([invoiceId]);
    var syncToken = syncTokens[invoiceId] || "0";  // Use default "0" if missing

    // ‚úÖ Prepare the invoice data for update
    var invoiceData = {
      "Id": invoiceId,
      "SyncToken": syncToken,
      "DocNumber": invoiceNumber,
      "TxnDate": txnDate,
      "CustomerRef": { "name": customer },
      "TotalAmt": 0,  // Will be calculated dynamically
      "Line": []
    };

    Logger.log("üîÑ Collecting line items for invoice...");

    // ‚úÖ Read line items from the sheet
    var lastRow = sheet.getLastRow();
    var calculatedTotal = 0;

    for (var row = 7; row <= lastRow; row++) {
      // üîÑ Swapping ItemRef (UPC) with ItemName (Item Number)
      var itemRef = sheet.getRange("A" + row).getValue().trim(); // Now pulling itemRef from Column A
      var itemName = sheet.getRange("E" + row).getValue();       // Now pulling itemName from Column E
      var qty = parseFloat(sheet.getRange("B" + row).getValue());
      var rate = parseFloat(sheet.getRange("C" + row).getValue());
      var amount = parseFloat(sheet.getRange("D" + row).getValue());

      // ‚úÖ Add line item if all fields are valid
      if (itemName && qty && rate && amount && itemRef) {
        Logger.log(`üõí Item: ${itemName} | Qty: ${qty} | Rate: ${rate} | Amount: ${amount} | ItemRef (UPC): ${itemRef}`);

        invoiceData.Line.push({
          "DetailType": "SalesItemLineDetail",
          "Amount": amount,
          "Description": itemName,  // Use swapped itemName (formerly UPC)
          "SalesItemLineDetail": {
            "ItemRef": { "value": String(itemRef) }, // Use swapped itemRef (formerly Item Number)
            "Qty": qty,
            "UnitPrice": rate,
            "TaxCodeRef": { "value": "NON" }
          }
        });

        calculatedTotal += amount;
      }
    }

    // ‚úÖ Update the invoice total based on actual calculations
    invoiceData.TotalAmt = calculatedTotal;

    // ‚úÖ Overwrite item names with correct names from QuickBooks (if mismatched)
    invoiceData.Line.forEach((line) => {
      if (line.SalesItemLineDetail) {
        var itemId = line.SalesItemLineDetail.ItemRef.value;
        var correctName = getItemNameById(itemId); // Fetch correct name from QuickBooks

        if (correctName && line.Description !== correctName) {
          Logger.log(`üîÑ Overwriting Description: ${line.Description} ‚Üí ${correctName}`);
          line.Description = correctName;  // Fix mismatched item names
        }
      }
    });

    Logger.log("üí∞ Final Calculated Total: " + invoiceData.TotalAmt);
    Logger.log("üì§ Sending Invoice Update (UPDATE): " + JSON.stringify(invoiceData));

    // ‚úÖ Push the updated invoice to QuickBooks
    updateInvoiceInQBO(invoiceData);

  } catch (error) {
    Logger.log("‚ùå Error in pushInvoiceToQBO: " + error.message);
  }
}
