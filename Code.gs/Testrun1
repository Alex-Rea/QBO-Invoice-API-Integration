function formatInvoiceSheet(newSheet, invoice) {
  const managementEmails = [
    "alex.rea@casinosnaks.com",
    "ceci.pagnozzi@casinosnaks.com",
    "jim.rea@casinosnaks.com",
    "penny.rea@casinosnaks.com",
    "jprea8@gmail.com"
  ]; // Management emails

  // Set Invoice Metadata
  newSheet.getRange("A1").setValue("Invoice Number: " + (invoice.DocNumber || "N/A"));
  newSheet.getRange("A2").setValue("Date: " + (invoice.TxnDate || "N/A"));
  newSheet.getRange("A3").setValue("Customer: " + (invoice.CustomerRef ? invoice.CustomerRef.name : "Unknown"));

  // Auto-updating total
  newSheet.getRange("A4").setFormula('="Total: $" & SUM(D7:D)');

  // Set headers
  newSheet.getRange("A6").setValue("Item");
  newSheet.getRange("B6").setValue("Quantity");
  newSheet.getRange("C6").setValue("Rate");
  newSheet.getRange("D6").setValue("Amount");
  newSheet.getRange("E6").setValue("ItemRef");

  let row = 7;

  if (invoice.Line && invoice.Line.length > 0) {
    invoice.Line.forEach(function (line) {
      if (line.SalesItemLineDetail) {
        const itemRef = line.SalesItemLineDetail.ItemRef ? line.SalesItemLineDetail.ItemRef.value : "N/A";
        const itemName = (itemRef && itemRef !== "N/A") ? getItemDetailsById(itemRef) : "Unknown";

        // Set item details
        newSheet.getRange("A" + row).setValue(itemName);
        newSheet.getRange("B" + row).setValue(line.SalesItemLineDetail.Qty || 0);
        newSheet.getRange("C" + row).setValue(line.SalesItemLineDetail.UnitPrice || 0);
        newSheet.getRange("D" + row).setFormula("=B" + row + "*C" + row);
        newSheet.getRange("E" + row).setValue(itemRef);

        row++;
      }
    });
  } else {
    newSheet.getRange("A7").setValue("⚠️ No items found for this invoice.");
  }

  // 🎨 Formatting: Wrap Text, Adjust Sizes, Borders, and Freezing
  const fullRange = newSheet.getRange(1, 1, newSheet.getMaxRows(), newSheet.getMaxColumns());
  fullRange.setWrap(true); // Wrap text
  fullRange.setVerticalAlignment("middle"); // Align text to the middle vertically

  // Custom width for Column A
  newSheet.setColumnWidth(1, newSheet.getColumnWidth(1) * 1.1);

  // Custom row height adjustments
  const rowHeights = Array.from({ length: row }, (_, i) => newSheet.getRowHeight(i + 1) * 1.7);
  rowHeights.forEach((height, i) => {
    newSheet.setRowHeight(i + 1, height);
  });

  // ➖ Add dotted horizontal borders between rows
  const horizontalRange = newSheet.getRange(7, 1, row - 6, 5);
  horizontalRange.setBorder(false, false, true, false, false, false, "black", SpreadsheetApp.BorderStyle.DOTTED);
  SpreadsheetApp.flush();

  // ➖ Add gray vertical borders between columns
  for (let col = 2; col <= 5; col++) {
    let verticalRange = newSheet.getRange(7, col, row - 6, 1);
    verticalRange.setBorder(false, true, false, false, false, false, "#cccccc", SpreadsheetApp.BorderStyle.SOLID);
  }
  SpreadsheetApp.flush();

  // ❄️ Freeze Column A
  newSheet.setFrozenColumns(1);

  // ✅ Apply Protection AFTER formatting
  const protection = newSheet.protect().setDescription("Invoice Sheet Protection");
  protection.addEditors(managementEmails);
  protection.removeEditors(protection.getEditors().filter(editor => !managementEmails.includes(editor.getEmail())));

  let unprotectedRanges = [
    newSheet.getRange(7, 2, row - 7, 1), // Quantities (Column B)
    newSheet.getRange("E2:E3"),           // Checkboxes for sending PDF to Gchat
    newSheet.getRange("F2"),              // Name selection dropdown
    newSheet.getRange("C2:C3")            // Checkboxes for "Apply Special Pricing"
  ];
  protection.setUnprotectedRanges(unprotectedRanges);

  Logger.log("✅ Sheet formatted: Borders applied, text wrapped, middle alignment, frozen columns, and protection set.");
}
