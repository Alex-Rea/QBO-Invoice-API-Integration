var requestCount = 0;
var scriptProperties = PropertiesService.getScriptProperties();

var CLIENT_ID = scriptProperties.getProperty("CLIENT_ID");
var CLIENT_SECRET = scriptProperties.getProperty("CLIENT_SECRET");
var COMPANY_ID = scriptProperties.getProperty("COMPANY_ID");
var REFRESH_TOKEN = scriptProperties.getProperty("REFRESH_TOKEN");
var BASE_URL = "https://sandbox-quickbooks.api.intuit.com/v3/company/";


var lastAccessToken = null;
var lastTokenTime = null;

function getAccessToken() {
  checkRateLimit();

  var now = new Date().getTime();

  // ‚úÖ Reuse token if it's still valid (less than 60 minutes old)
  if (lastAccessToken && lastTokenTime && now - lastTokenTime < 3600000) {
    Logger.log("‚úÖ Using Cached Access Token.");
    return lastAccessToken;
  }

  const tokenUrl = "https://oauth.platform.intuit.com/oauth2/v1/tokens/bearer";

  const headers = { "Content-Type": "application/x-www-form-urlencoded" };
  const payload = "grant_type=refresh_token"
                + "&refresh_token=" + encodeURIComponent(REFRESH_TOKEN)
                + "&client_id=" + encodeURIComponent(CLIENT_ID)
                + "&client_secret=" + encodeURIComponent(CLIENT_SECRET);

  const options = { method: "post", headers: headers, payload: payload, muteHttpExceptions: true };
  const response = UrlFetchApp.fetch(tokenUrl, options);
  const json = JSON.parse(response.getContentText());

  if (json.access_token) {
    Logger.log("‚úÖ Access Token Retrieved.");

    lastAccessToken = json.access_token;
    lastTokenTime = now;

    // ‚úÖ Handle token revocation correctly
    if (json.refresh_token) {
      PropertiesService.getScriptProperties().setProperty("REFRESH_TOKEN", json.refresh_token);
      Logger.log("üîÑ Updated REFRESH TOKEN saved.");
    }
    return json.access_token;
  } else {
    Logger.log("‚ùå Error retrieving access token: " + response.getContentText());

    // ‚úÖ Detects if the refresh token is invalid/revoked
    if (json.error && json.error === "invalid_grant") {
      Logger.log("‚ùå Refresh token is invalid or expired. Manual reauthorization needed.");
      return null; // Prevents repeated failures
    }
    return null;
  }
}

function checkRateLimit() {
  requestCount++;
  if (requestCount % 5 === 0) {  // Every 5 requests, wait 1.5 seconds
    Logger.log("‚è≥ Adding delay to prevent hitting QuickBooks rate limits...");
    Utilities.sleep(1500);
  }
}


function refreshInvoices() {
  checkRateLimit();

  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var menuSheet = ss.getSheetByName("Menu");

  if (!menuSheet) {
    Logger.log("‚ùå Error: 'Menu' sheet not found.");
    return;
  }

  // ‚úÖ Step 1: Check if A2 and A3 are both checked
  var checkA2 = menuSheet.getRange("A2").getValue();
  var checkA3 = menuSheet.getRange("A3").getValue();

  if (!(checkA2 && checkA3)) {
    Logger.log("‚ùå A2 and A3 must be checked to refresh invoices.");
    return;
  }

  Logger.log("‚úÖ Both checkboxes checked in 'Menu'! Refreshing Invoices...");

  // ‚úÖ Step 2: Delete all existing invoice sheets
  var sheets = ss.getSheets();
  var invoiceSheets = sheets.filter(sheet => sheet.getName().startsWith("Inv_"));
  Logger.log("üóë Found " + invoiceSheets.length + " invoice sheets to delete.");

  invoiceSheets.forEach(sheet => {
    try {
      ss.deleteSheet(sheet);
      Logger.log("üóë Deleted: " + sheet.getName());
    } catch (e) {
      Logger.log("‚ö†Ô∏è Skipping already deleted sheet: " + e.message);
    }
  });

  // ‚úÖ Step 3: Fetch new invoices from QuickBooks
  var accessToken = getAccessToken();
  if (!accessToken) {
    Logger.log("‚ùå No access token retrieved!");
    return;
  }

  var query = "SELECT * FROM Invoice ORDERBY TxnDate DESC STARTPOSITION 1 MAXRESULTS 10";
  var apiUrl = BASE_URL + COMPANY_ID + "/query?query=" + encodeURIComponent(query);

  var headers = {
    "Authorization": "Bearer " + accessToken,
    "Accept": "application/json"
  };

  var options = {
    method: "get",
    headers: headers,
    muteHttpExceptions: true
  };

  var response = UrlFetchApp.fetch(apiUrl, options);
  var json = JSON.parse(response.getContentText());

  if (json.Fault) {
    Logger.log("‚ùå API Error: " + JSON.stringify(json.Fault));
    return;
  }

  if (!json.QueryResponse || !json.QueryResponse.Invoice) {
    Logger.log("‚ö†Ô∏è No invoices found in QuickBooks!");
    return;
  }

  var invoices = json.QueryResponse.Invoice;
  Logger.log("‚úÖ Invoices Retrieved: " + invoices.length);

// ‚úÖ Step 4: Create new invoice sheets & store links with `gid`
var invoiceLinks = [];
var invoiceDescriptions = [];

invoices.forEach(function(invoice) {
  var invoiceNumber = invoice.DocNumber || "Invoice_" + invoice.Id;
  var invoiceTabName = "Inv_" + invoiceNumber;
  var customerName = invoice.CustomerRef && invoice.CustomerRef.name ? invoice.CustomerRef.name : "Unknown Customer";

  var newSheet = ss.insertSheet(invoiceTabName);
  formatInvoiceSheet(newSheet, invoice);

  // ‚úÖ Use `gid` for links
  var sheetGid = newSheet.getSheetId();
  var linkFormula = `=HYPERLINK("https://docs.google.com/spreadsheets/d/${ss.getId()}/edit#gid=${sheetGid}", "${invoiceNumber}")`;
  
  invoiceLinks.push([linkFormula]);         // Column A (Invoice Links)
  invoiceDescriptions.push([customerName]); // Column B (Customer Name)
});

// ‚úÖ Place links in "Menu" (A5:A10) & customer names in (B5:B10)
var menuSheet = ss.getSheetByName("Menu");
var linkRange = menuSheet.getRange(5, 1, invoiceLinks.length, 1);
var descRange = menuSheet.getRange(5, 2, invoiceDescriptions.length, 1);

linkRange.setFormulas(invoiceLinks);
descRange.setValues(invoiceDescriptions);



  // ‚úÖ Step 6: Reset A2 & A3 checkboxes
  menuSheet.getRange("A2").setValue(false);
  menuSheet.getRange("A3").setValue(false);

  Logger.log("‚úÖ Invoice refresh complete!");
}




function formatInvoiceSheet(newSheet, invoice) {
  newSheet.getRange("A1").setValue("Invoice Number: " + (invoice.DocNumber || "N/A"));
  newSheet.getRange("A2").setValue("Date: " + (invoice.TxnDate || "N/A"));
  newSheet.getRange("A3").setValue("Customer: " + (invoice.CustomerRef ? invoice.CustomerRef.name : "Unknown"));
  
  // ‚úÖ Auto-updating total
  newSheet.getRange("A4").setFormula('="Total: $" & SUM(D7:D)');

  newSheet.getRange("A6").setValue("Item");
  newSheet.getRange("B6").setValue("Quantity");
  newSheet.getRange("C6").setValue("Rate");
  newSheet.getRange("D6").setValue("Amount");
  newSheet.getRange("E6").setValue("ItemRef"); // Store ItemRef for QBO

var row = 7;

  if (invoice.Line && invoice.Line.length > 0) {
    invoice.Line.forEach(function(line) {
      if (line.SalesItemLineDetail) {
        var itemRef = line.SalesItemLineDetail.ItemRef ? line.SalesItemLineDetail.ItemRef.value : "N/A";
        
        // ‚úÖ **Extract the actual Item Name instead of Sales Description**
        var itemName = (itemRef && itemRef !== "N/A") ? getItemNameById(itemRef) : "Unknown";
        newSheet.getRange("A" + row).setValue(itemName);
        newSheet.getRange("B" + row).setValue(line.SalesItemLineDetail.Qty || 0);
        newSheet.getRange("C" + row).setValue(line.SalesItemLineDetail.UnitPrice || 0);
        newSheet.getRange("D" + row).setFormula("=B" + row + "*C" + row);
        newSheet.getRange("E" + row).setValue(itemRef); // Store ItemRef

        row++;
      }
    });
  } else {
    newSheet.getRange("A7").setValue("‚ö†Ô∏è No items found for this invoice.");
  }

  newSheet.getRange("D1").setValue("Push Changes");
  newSheet.getRange("D2").insertCheckboxes();
  newSheet.getRange("D3").insertCheckboxes();
}


function getAllSyncTokens(invoiceIds) {
  if (!invoiceIds.length) {
    return {};
  }

  checkRateLimit();

  const accessToken = getAccessToken();
  if (!accessToken) {
    Logger.log("‚ùå No access token, cannot fetch SyncTokens.");
    return {};
  }

  const query = "SELECT Id, SyncToken FROM Invoice WHERE Id IN (" + invoiceIds.map(id => `'${id}'`).join(",") + ")";
  const apiUrl = BASE_URL + COMPANY_ID + "/query?query=" + encodeURIComponent(query);

  const headers = {
    "Authorization": "Bearer " + accessToken,
    "Accept": "application/json"
  };

  const options = {
    method: "get",
    headers: headers,
    muteHttpExceptions: true
  };

  const response = UrlFetchApp.fetch(apiUrl, options);
  const json = JSON.parse(response.getContentText());

  let syncTokenMap = {};
  if (json.QueryResponse && json.QueryResponse.Invoice) {
    json.QueryResponse.Invoice.forEach(invoice => {
      syncTokenMap[invoice.Id] = invoice.SyncToken;
    });
    Logger.log("‚úÖ Retrieved SyncTokens for " + json.QueryResponse.Invoice.length + " invoices.");
  } else {
    Logger.log("‚ùå Failed to retrieve SyncTokens.");
  }

  return syncTokenMap;
}

function getInvoiceByDocNumber(docNumber) {
  checkRateLimit();

  try {
    const accessToken = getAccessToken();
    if (!accessToken) {
      Logger.log("‚ùå No access token, cannot retrieve invoice.");
      return null;
    }

    const query = "SELECT Id, SyncToken, CustomerRef FROM Invoice WHERE DocNumber = '" + docNumber + "'";
    const apiUrl = BASE_URL + COMPANY_ID + "/query?query=" + encodeURIComponent(query);

    const headers = {
      "Authorization": "Bearer " + accessToken,
      "Accept": "application/json"
    };

    const options = {
      method: "get",
      headers: headers,
      muteHttpExceptions: true
    };

    const response = UrlFetchApp.fetch(apiUrl, options);
    const json = JSON.parse(response.getContentText());

    if (json.QueryResponse && json.QueryResponse.Invoice && json.QueryResponse.Invoice.length > 0) {
      const invoice = json.QueryResponse.Invoice[0];

      Logger.log("‚úÖ Invoice found: " + JSON.stringify(invoice)); // üîÑ Keep logging for debugging

      if (!invoice.Id || !invoice.SyncToken) {
        Logger.log("‚ö†Ô∏è Invoice data is missing critical fields (Id/SyncToken).");
        return null;
      }

      return invoice;
    } else {
      Logger.log("‚ùå Invoice not found for DocNumber: " + docNumber);
      return null;
    }

  } catch (error) {  // ‚úÖ Missing catch block added here!
    Logger.log("‚ùå Error in getInvoiceByDocNumber: " + error.message);
    return null;
  }
}



function getInvoiceIdByDocNumber(docNumber) {
  checkRateLimit();

  const accessToken = getAccessToken();
  if (!accessToken) {
    Logger.log("‚ùå No access token, cannot fetch invoice ID.");
    return null;
  }

  const query = "SELECT Id FROM Invoice WHERE DocNumber = '" + docNumber + "'";
  const apiUrl = BASE_URL + COMPANY_ID + "/query?query=" + encodeURIComponent(query);

  const headers = {
    "Authorization": "Bearer " + accessToken,
    "Accept": "application/json"
  };

  const options = {
    method: "get",
    headers: headers,
    muteHttpExceptions: true
  };

  const response = UrlFetchApp.fetch(apiUrl, options);
  const json = JSON.parse(response.getContentText());

  if (json.QueryResponse && json.QueryResponse.Invoice && json.QueryResponse.Invoice.length > 0) {
    Logger.log("‚úÖ Invoice found: " + JSON.stringify(json.QueryResponse.Invoice[0]));
    return json.QueryResponse.Invoice[0].Id;
  } else {
    Logger.log("‚ùå No existing invoice found for DocNumber: " + docNumber);
    return null;
  }
}


function getItemNameById(itemId) {
  checkRateLimit();

  if (!itemId || itemId === "N/A") {
    Logger.log("‚ö†Ô∏è Skipping item lookup: No valid item ID.");
    return null;
  }
  Utilities.sleep(1000);  // ‚úÖ 1-second delay to prevent rate limiting

  const accessToken = getAccessToken();
  if (!accessToken) {
    Logger.log("‚ùå No access token, cannot fetch item name.");
    return null;
  }

  const query = "SELECT Name FROM Item WHERE Id = '" + itemId + "'";
  const apiUrl = BASE_URL + COMPANY_ID + "/query?query=" + encodeURIComponent(query);

  const headers = {
    "Authorization": "Bearer " + accessToken,
    "Accept": "application/json"
  };

  const options = {
    method: "get",
    headers: headers,
    muteHttpExceptions: true
  };

  const response = UrlFetchApp.fetch(apiUrl, options);
  const json = JSON.parse(response.getContentText());

  if (json.QueryResponse && json.QueryResponse.Item && json.QueryResponse.Item.length > 0) {
    Logger.log("‚úÖ Item Found: " + JSON.stringify(json.QueryResponse.Item[0]));
    return json.QueryResponse.Item[0].Name;
  } else {
    Logger.log("‚ùå Item ID not found in QuickBooks: " + itemId);
    return null;
  }
}

function getCustomerIdByName(customerName) {
  if (!customerName) {
    Logger.log("‚ùå No customer name provided.");
    return null;
  }

  // ‚úÖ Use cached data if available
  if (customerCache[customerId]) {
    return customerCache[customerId].email;
  }

  const accessToken = getAccessToken();
  if (!accessToken) {
    Logger.log("‚ùå No access token, cannot fetch customer.");
    return null;
  }

const query = "SELECT Id, DisplayName FROM Customer WHERE DisplayName = '" + customerName + "'";
  const apiUrl = BASE_URL + COMPANY_ID + "/query?query=" + encodeURIComponent(query);

  const headers = {
    "Authorization": "Bearer " + accessToken,
    "Accept": "application/json"
  };

  const options = {
    method: "get",
    headers: headers,
    muteHttpExceptions: true
  };

  const response = UrlFetchApp.fetch(apiUrl, options);
  const json = JSON.parse(response.getContentText());

  if (json.Customer && json.Customer.PrimaryEmailAddr) {
    const email = json.Customer.PrimaryEmailAddr.Address;
    customerCache[customerId] = { email: email };  // ‚úÖ Cache the email
    Logger.log("‚úÖ Customer email found: " + email);
    return email;
  } else {
    Logger.log("‚ö†Ô∏è No email found for Customer ID: " + customerId);
    return null;
  }
}


function getItemRefByName(itemName) {
  checkRateLimit();

  const accessToken = getAccessToken();
  if (!accessToken) {
    Logger.log("‚ùå No access token, cannot fetch item.");
    return null;
  }

  const query = "SELECT Id, Name FROM Item WHERE Name = '" + itemName + "'";
  const apiUrl = BASE_URL + COMPANY_ID + "/query?query=" + encodeURIComponent(query);

  const headers = {
    "Authorization": "Bearer " + accessToken,
    "Accept": "application/json"
  };

  const options = {
    method: "get",
    headers: headers,
    muteHttpExceptions: true
  };

  const response = UrlFetchApp.fetch(apiUrl, options);
  const json = JSON.parse(response.getContentText());

  if (json.QueryResponse && json.QueryResponse.Item && json.QueryResponse.Item.length > 0) {
    Logger.log("‚úÖ Item found: " + JSON.stringify(json.QueryResponse.Item[0]));
    return {
      value: json.QueryResponse.Item[0].Id,
      name: json.QueryResponse.Item[0].Name
    };
  } else {
    Logger.log("‚ùå Item not found in QuickBooks: " + itemName);
    return null;
  }
}

var customerCache = {};  // ‚úÖ Store customer details in memory

function getCustomerEmailById(customerId) {
  checkRateLimit();

  if (!customerId) {
    Logger.log("‚ùå No customer ID provided.");
    return null;
  }

  // ‚úÖ Return from cache if available
  if (customerCache[customerId]) {
    return customerCache[customerId].email;
  }

  const accessToken = getAccessToken();
  if (!accessToken) {
    Logger.log("‚ùå No access token, cannot fetch customer email.");
    return null;
  }

  const apiUrl = BASE_URL + COMPANY_ID + "/customer/" + customerId;

  const headers = {
    "Authorization": "Bearer " + accessToken,
    "Accept": "application/json"
  };

  const options = {
    method: "get",
    headers: headers,
    muteHttpExceptions: true
  };

  const response = UrlFetchApp.fetch(apiUrl, options);
  const json = JSON.parse(response.getContentText());

  if (json.Customer && json.Customer.PrimaryEmailAddr) {
    const email = json.Customer.PrimaryEmailAddr.Address;
    customerCache[customerId] = { email: email };  // ‚úÖ Cache the email
    Logger.log("‚úÖ Customer email found: " + email);
    return email;
  } else {
    Logger.log("‚ö†Ô∏è No email found for Customer ID: " + customerId);
    return null;
  }
}



function updateInvoiceInQBO(invoiceData) {
  checkRateLimit();

  try {
    const accessToken = getAccessToken();
    if (!accessToken) {
      Logger.log("‚ùå No access token, cannot update invoice.");
      return;
    }

    // ‚úÖ Fetch existing invoice details to get SyncToken, Customer ID, and Email
    const existingInvoice = getInvoiceByDocNumber(invoiceData.DocNumber);

    if (!existingInvoice || !existingInvoice.Id || !existingInvoice.SyncToken) {
      Logger.log("‚ùå Could not retrieve invoice details for updating.");
      return;
    }

    // ‚úÖ Preserve critical fields (Customer ID, SyncToken, Email)
    invoiceData.Id = existingInvoice.Id;
    invoiceData.SyncToken = existingInvoice.SyncToken;
    invoiceData.CustomerRef = { "value": existingInvoice.CustomerRef.value }; // Ensure correct Customer ID

    // ‚úÖ Preserve BillEmail if it exists
    if (existingInvoice.BillEmail && existingInvoice.BillEmail.Address) {
      invoiceData.BillEmail = { "Address": existingInvoice.BillEmail.Address };
      Logger.log("üìß Preserved Email: " + existingInvoice.BillEmail.Address);
    } else {
      // ‚úÖ Fetch the email from customer profile if missing
      const customerEmail = getCustomerEmailById(existingInvoice.CustomerRef.value);
      if (customerEmail) {
        invoiceData.BillEmail = { "Address": customerEmail };
        Logger.log("üìß Retrieved Customer Email: " + customerEmail);
      } else {
        Logger.log("‚ö†Ô∏è No email found, skipping BillEmail field.");
      }
    }

    // ‚úÖ Ensure line items have correct calculations
    invoiceData.Line.forEach((line) => {
      if (line.SalesItemLineDetail) {
        var unitPrice = parseFloat(line.SalesItemLineDetail.UnitPrice);
        var qty = parseFloat(line.SalesItemLineDetail.Qty);

        // ‚úÖ Ensure Amount is correctly calculated to avoid QuickBooks 6070 Error
        line.Amount = parseFloat((unitPrice * qty).toFixed(2));

        // ‚úÖ Ensure Tax Code is set
        line.SalesItemLineDetail.TaxCodeRef = { "value": "NON" };
      }
    });

    const apiUrl = BASE_URL + COMPANY_ID + "/invoice";

    const headers = {
      "Authorization": "Bearer " + accessToken,
      "Accept": "application/json",
      "Content-Type": "application/json"
    };

    const payload = JSON.stringify(invoiceData);
    Logger.log("üì§ Sending Invoice Update (UPDATE): " + payload);

    const options = {
      method: "post",
      headers: headers,
      muteHttpExceptions: true,
      payload: payload
    };

    const response = UrlFetchApp.fetch(apiUrl, options);
    Logger.log("‚úÖ QuickBooks API Response: " + response.getContentText());

  } catch (error) {
    Logger.log("‚ùå Error in updateInvoiceInQBO: " + error.message);
  }
}


function pushInvoiceToQBO(sheet) {
  checkRateLimit();

  try {
    Logger.log("üìå pushInvoiceToQBO Started for: " + sheet.getName());

    var invoiceNumber = sheet.getRange("A1").getValue().replace("Invoice Number: ", "").trim();
    var txnDate = sheet.getRange("A2").getValue().replace("Date: ", "").trim();
    var customer = sheet.getRange("A3").getValue().replace("Customer: ", "").trim();
    var total = parseFloat(sheet.getRange("A4").getValue().replace("Total: $", "").trim());

    Logger.log("üìÜ Date: " + txnDate);
    Logger.log("üë§ Customer: " + customer);
    Logger.log("üí∞ Total Before Recalculation: " + total);

    // **Step 1: Get All Invoice IDs and Sync Tokens**
    var invoiceId = getInvoiceIdByDocNumber(invoiceNumber);
    if (!invoiceId) {
      Logger.log("‚ùå No existing invoice found. Creating a new one instead.");
      createInvoiceInQBO(sheet);
      return;
    }

    var syncTokens = getAllSyncTokens([invoiceId]);  // Get SyncToken in batch
    var syncToken = syncTokens[invoiceId] || "0";  // Default to "0" if missing

    var invoiceData = {
      "Id": invoiceId,
      "SyncToken": syncToken,
      "DocNumber": invoiceNumber,
      "TxnDate": txnDate,
      "CustomerRef": { "name": customer },
      "TotalAmt": 0,
      "Line": []
    };

    Logger.log("üîÑ Collecting invoice line items...");

    var lastRow = sheet.getLastRow();
    var calculatedTotal = 0;

    for (var row = 7; row <= lastRow; row++) {
      var itemName = sheet.getRange("A" + row).getValue().trim();
      var qty = parseFloat(sheet.getRange("B" + row).getValue());
      var rate = parseFloat(sheet.getRange("C" + row).getValue());
      var amount = parseFloat(sheet.getRange("D" + row).getValue());
      var itemRef = sheet.getRange("E" + row).getValue();

      if (itemName && qty && rate && amount && itemRef) {
        Logger.log("üõí Item: " + itemName + " | Qty: " + qty + " | Rate: " + rate + " | Amount: " + amount + " | ItemRef: " + itemRef);

        invoiceData.Line.push({
          "DetailType": "SalesItemLineDetail",
          "Amount": amount,
          "Description": itemName,  // ‚úÖ Initially set to what‚Äôs in Google Sheets
          "SalesItemLineDetail": {
            "ItemRef": { "value": String(itemRef) },
            "Qty": qty,
            "UnitPrice": rate,
            "TaxCodeRef": { "value": "NON" }
          }
        });

        calculatedTotal += amount;
      }
    }

    invoiceData.TotalAmt = calculatedTotal;

    // ‚úÖ **Step 2: Fix Item Name Mismatches Before Sending**
    invoiceData.Line.forEach((line) => {
      if (line.SalesItemLineDetail) {
        var itemId = line.SalesItemLineDetail.ItemRef.value;
        var correctName = getItemNameById(itemId); // Fetch correct name from QuickBooks

        if (correctName) {
          Logger.log(`üîÑ Overwriting Description: ${line.Description} ‚Üí ${correctName}`);
          line.Description = correctName; // Ensure it matches QuickBooks data
        }
      }
    });

    Logger.log("üí∞ Final Calculated Total: " + invoiceData.TotalAmt);
    Logger.log("üì§ Sending Invoice Update (UPDATE): " + JSON.stringify(invoiceData));

    updateInvoiceInQBO(invoiceData);

  } catch (error) {
    Logger.log("‚ùå Error in pushInvoiceToQBO: " + error.message);
  }
}




function onEditTrigger(e) {
  var sheet = e.source.getActiveSheet();
  var range = e.range;
  
  // ‚úÖ Check if edit is on the "Menu" sheet at A2 or A3
  if (sheet.getName() === "Menu" && (range.getA1Notation() === "A2" || range.getA1Notation() === "A3")) {
    var check1 = sheet.getRange("A2").getValue();
    var check2 = sheet.getRange("A3").getValue();

    if (check1 === true && check2 === true) {
      Logger.log("‚úÖ Both checkboxes checked in 'Menu'! Refreshing Invoices...");
      refreshInvoices(); // Function to delete old invoices and fetch new ones

      // ‚úÖ Reset checkboxes AFTER running
      sheet.getRange("A2").setValue(false);
      sheet.getRange("A3").setValue(false);
    }
  }

  // ‚úÖ Existing trigger for D2 and D3 in invoice sheets
  if (range.getA1Notation() === "D2" || range.getA1Notation() === "D3") {
    var checkD2 = sheet.getRange("D2").getValue();
    var checkD3 = sheet.getRange("D3").getValue();

    if (checkD2 === true && checkD3 === true) {
      var invoiceNumber = sheet.getRange("A1").getValue().replace("Invoice Number: ", "").trim();
      if (invoiceNumber) {
        Logger.log("‚úÖ Both checkboxes checked! Syncing Invoice: " + invoiceNumber);
        pushInvoiceToQBO(sheet);
      } else {
        Logger.log("‚ùå No invoice number found in A1.");
      }

      // ‚úÖ Reset checkboxes AFTER running
      sheet.getRange("D2").setValue(false);
      sheet.getRange("D3").setValue(false);
    }
  }
}


function createInstallableTrigger() {
  var triggers = ScriptApp.getProjectTriggers();
  
  // Avoid duplicate triggers
  for (var i = 0; i < triggers.length; i++) {
    if (triggers[i].getHandlerFunction() === "onEditTrigger") {
      Logger.log("üöÄ Installable trigger already exists!");
      return;
    }
  }
  
  ScriptApp.newTrigger("onEditTrigger")
    .forSpreadsheet(SpreadsheetApp.getActiveSpreadsheet())
    .onEdit()
    .create();
  
  Logger.log("‚úÖ Installable trigger created!");
}


/**
 * ‚úÖ Run this function once to set up the trigger!
 */
function setup() {
  createInstallableTrigger();
}








function testBaseURL() {
  const accessToken = getAccessToken();
  if (!accessToken) {
    Logger.log("‚ùå No access token retrieved.");
    return;
  }

  const testUrl = BASE_URL + COMPANY_ID + "/companyinfo/" + COMPANY_ID;
  
  const headers = {
    "Authorization": "Bearer " + accessToken,
    "Accept": "application/json"
  };

  const options = {
    method: "get",
    headers: headers,
    muteHttpExceptions: true
  };

  const response = UrlFetchApp.fetch(testUrl, options);
  Logger.log("‚úÖ QuickBooks API Response: " + response.getContentText());
}



function authorizeExternalRequests() {
  UrlFetchApp.fetch("https://www.google.com");
  Logger.log("‚úÖ External requests authorized.");
}



function testPushInvoice() {
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Inv_1032"); // Change to the name of an actual invoice tab
  if (sheet) {
    pushInvoiceToQBO(sheet);
  } else {
    Logger.log("‚ùå Error: Invoice sheet not found.");
  }
}

function testItemRefLookup() {
  var itemName = "Rocks"; // Replace with an actual item name
  var itemRef = getItemRefByName(itemName);
  Logger.log("‚úÖ Item Ref for " + itemName + ": " + JSON.stringify(itemRef));
}
